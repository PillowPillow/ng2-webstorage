{"version":3,"file":"app.js","sourceRoot":"","sources":["../lib/app.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAE,cAAc,EAAuB,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEtG,OAAO,EAAC,OAAO,EAAC,MAAM,iBAAiB,CAAC;AACxC,OAAO,EAAC,mBAAmB,EAAE,qBAAqB,EAAC,MAAM,kBAAkB,CAAC;AAC5E,OAAO,EAAC,gBAAgB,EAAC,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAoB,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACxE,OAAO,EAAC,gBAAgB,EAAC,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAC,qBAAqB,EAAC,MAAM,2BAA2B,CAAC;AAEhE,cAAc,oBAAoB,CAAC;AACnC,cAAc,oBAAoB,CAAC;AACnC,cAAc,kBAAkB,CAAC;AAEjC,MAAM,CAAC,IAAM,iBAAiB,GAAG,IAAI,cAAc,CAAC,mBAAmB,CAAC,CAAC;;IA4BxE,uBAAoB,MAAa,EAAwC;QAArD,WAAM,GAAN,MAAM,CAAO;QAChC,EAAE,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,gBAAgB,CAAC,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACpD,gBAAgB,CAAC,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC1D,gBAAgB,CAAC,kBAAkB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,qBAAqB,CAAC,WAAW,EAAE,CAAC;KACpC;IA5BM,qBAAO,GAAd,UAAe,MAAyB;QACvC,MAAM,CAAC;YACN,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE;gBACV;oBACC,OAAO,EAAE,iBAAiB;oBAC1B,QAAQ,EAAE,MAAM;iBAChB;gBACD;oBACC,OAAO,EAAE,gBAAgB;oBACzB,UAAU,EAAE,aAAa;oBACzB,IAAI,EAAE;wBACL,iBAAiB;qBACjB;iBACD;aACD;SACD,CAAC;KACF;IAaO,2CAAmB,GAA3B;QAAA,iBAQC;QAPA,EAAE,CAAA,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,KAAkB;gBAAK,OAAA,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oBAC1E,IAAI,OAAO,GAAW,MAAM,CAAC,cAAc,KAAK,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;oBACpG,EAAE,CAAA,CAAC,KAAK,CAAC,GAAG,KAAK,IAAI,CAAC;wBAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBAC5D,IAAI;wBAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;iBAClD,CAAC;YAJyD,CAIzD,CAAC,CAAC;SACJ;KACD;;gBA7CD,QAAQ,SAAC;oBACT,YAAY,EAAE,EAAE;oBAChB,SAAS,EAAE,CAAC,qBAAqB,EAAE,mBAAmB,CAAC;oBACvD,OAAO,EAAE,EAAE;iBACX;;;;gBAnB8D,MAAM;gBAK1C,gBAAgB,uBAoCN,QAAQ,YAAI,MAAM,SAAC,gBAAgB;;wBAzCxE;;SAoBa,aAAa;AA2C1B,MAAM,wBAAwB,MAAwB;IACrD,MAAM,CAAC,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;CACpC","sourcesContent":["import {Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional} from '@angular/core';\r\nimport {LIB_KEY, LIB_KEY_CASE_SENSITIVE, LIB_KEY_SEPARATOR} from './constants/lib';\r\nimport {STORAGE} from './enums/storage';\r\nimport {LocalStorageService, SessionStorageService} from './services/index';\r\nimport {WebStorageHelper} from './helpers/webStorage';\r\nimport {IWebstorageConfig, WebstorageConfig} from './interfaces/config';\r\nimport {KeyStorageHelper} from './helpers/keyStorage';\r\nimport {StorageObserverHelper} from './helpers/storageObserver';\r\n\r\nexport * from './interfaces/index';\r\nexport * from './decorators/index';\r\nexport * from './services/index';\r\n\r\nexport const WEBSTORAGE_CONFIG = new InjectionToken('WEBSTORAGE_CONFIG');\r\n\r\n@NgModule({\r\n\tdeclarations: [],\r\n\tproviders: [SessionStorageService, LocalStorageService],\r\n\timports: []\r\n})\r\nexport class Ng2Webstorage {\r\n\r\n\tstatic forRoot(config?:IWebstorageConfig):ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: Ng2Webstorage,\r\n\t\t\tproviders: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: WEBSTORAGE_CONFIG,\r\n\t\t\t\t\tuseValue: config\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: WebstorageConfig,\r\n\t\t\t\t\tuseFactory: provideConfig,\r\n\t\t\t\t\tdeps: [\r\n\t\t\t\t\t\tWEBSTORAGE_CONFIG\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n\r\n\tconstructor(private ngZone:NgZone, @Optional() @Inject(WebstorageConfig) config:WebstorageConfig) {\r\n\t\tif(config) {\r\n\t\t\tKeyStorageHelper.setStorageKeyPrefix(config.prefix);\r\n\t\t\tKeyStorageHelper.setStorageKeySeparator(config.separator);\r\n\t\t\tKeyStorageHelper.setCaseSensitivity(config.caseSensitive);\r\n\t\t}\r\n\r\n\t\tthis.initStorageListener();\r\n\t\tStorageObserverHelper.initStorage();\r\n\t}\r\n\r\n\tprivate initStorageListener() {\r\n\t\tif(typeof window !== 'undefined') {\r\n\t\t\twindow.addEventListener('storage', (event:StorageEvent) => this.ngZone.run(() => {\r\n\t\t\t\tlet storage:STORAGE = window.sessionStorage === event.storageArea ? STORAGE.session : STORAGE.local;\r\n\t\t\t\tif(event.key === null) WebStorageHelper.refreshAll(storage);\r\n\t\t\t\telse WebStorageHelper.refresh(storage, event.key);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function provideConfig(config:IWebstorageConfig):WebstorageConfig {\r\n\treturn new WebstorageConfig(config);\r\n}\r\n"]}